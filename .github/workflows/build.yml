name: Build

on:
  push:
    branches:
      - main
      - master
    paths:
      - 'config/**'
      - '.github/workflows/build.yml'
  pull_request:
    paths:
      - 'config/**'
      - '.github/workflows/build.yml'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          # Splinky v2
          - board: nice_nano_v2
            shield: splinky_v2_left
          - board: nice_nano_v2
            shield: splinky_v2_right
          # Splinky v3
          - board: nice_nano_v2
            shield: splinky_v3_left
          - board: nice_nano_v2
            shield: splinky_v3_right
          # Settings reset
          - board: nice_nano_v2
            shield: settings_reset
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          pip install west
          sudo apt-get update
          sudo apt-get install -y git cmake ninja-build gperf ccache dfu-util device-tree-compiler wget python3-dev python3-pip python3-setuptools python3-tk python3-wheel xz-utils file make gcc gcc-multilib g++-multilib libsdl2-dev
          
      - name: Setup Shield Files
        run: |
          # Create shield directories
          mkdir -p config/boards/shields/splinky_v2
          mkdir -p config/boards/shields/splinky_v3
          
          # Copy shield files to correct locations
          if [ -f "config/splinky_v2.dtsi" ]; then
            cp "config/splinky_v2.dtsi" "config/boards/shields/splinky_v2/splinky_v2.dtsi"
          fi
          
          if [ -f "config/splinky_v2_left.overlay" ]; then
            cp "config/splinky_v2_left.overlay" "config/boards/shields/splinky_v2/splinky_v2_left.overlay"
          fi
          
          if [ -f "config/splinky_v2_right.overlay" ]; then
            cp "config/splinky_v2_right.overlay" "config/boards/shields/splinky_v2/splinky_v2_right.overlay"
          fi
          
          if [ -f "config/Kconfig.defconfig" ]; then
            cp "config/Kconfig.defconfig" "config/boards/shields/splinky_v2/Kconfig.defconfig"
          fi
          
          if [ -f "config/Kconfig.shield" ]; then
            cp "config/Kconfig.shield" "config/boards/shields/splinky_v2/Kconfig.shield"
          fi
          
          # Copy for v3 as well
          for file in config/boards/shields/splinky_v2/*; do
            base_name=$(basename "$file")
            new_name="${base_name/splinky_v2/splinky_v3}"
            cp "$file" "config/boards/shields/splinky_v3/${new_name}"
          done
          
          # Copy keymap files if needed
          if [ -f "config/charybdis.keymap" ]; then
            cp "config/charybdis.keymap" "config/splinky_v2.keymap"
            cp "config/charybdis.keymap" "config/splinky_v3.keymap"
          fi
          
          # Modify west.yml to use the official ZMK repository instead
          echo 'manifest:' > config/west.yml
          echo '  remotes:' >> config/west.yml
          echo '    - name: zmkfirmware' >> config/west.yml
          echo '      url-base: https://github.com/zmkfirmware' >> config/west.yml
          echo '  projects:' >> config/west.yml
          echo '    - name: zmk' >> config/west.yml
          echo '      remote: zmkfirmware' >> config/west.yml
          echo '      revision: main' >> config/west.yml
          echo '      import: app/west.yml' >> config/west.yml
          echo '  self:' >> config/west.yml
          echo '    path: config' >> config/west.yml
          
          # List shield files
          echo "Shield files found:"
          find config/boards/shields -type f | sort
          
          # Show the modified west.yml
          echo "Modified west.yml:"
          cat config/west.yml
          
      - name: West Init & Update
        run: |
          west init -l config
          west update
          
      - name: Check and Create CMakeLists.txt if needed
        run: |
          # Check if ZMK app directory exists and create it if needed
          mkdir -p zmk/app
          
          # Check if CMakeLists.txt exists, create it if not
          if [ ! -f "zmk/app/CMakeLists.txt" ]; then
            echo "Creating missing CMakeLists.txt file..."
            
            # Create CMakeLists.txt file
            echo '# This file is the main entry point for ZMK'\''s build process' > zmk/app/CMakeLists.txt
            echo '' >> zmk/app/CMakeLists.txt
            echo 'cmake_minimum_required(VERSION 3.13.1)' >> zmk/app/CMakeLists.txt
            echo '' >> zmk/app/CMakeLists.txt
            echo 'set(BOARD_ROOT ${CMAKE_SOURCE_DIR})' >> zmk/app/CMakeLists.txt
            echo 'set(ZMK_BASE ${CMAKE_SOURCE_DIR}/..)' >> zmk/app/CMakeLists.txt
            echo 'set(KEYMAP_DIR ${CMAKE_SOURCE_DIR}/../config)' >> zmk/app/CMakeLists.txt
            echo '' >> zmk/app/CMakeLists.txt
            echo '# Import the Zephyr build system' >> zmk/app/CMakeLists.txt
            echo 'find_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})' >> zmk/app/CMakeLists.txt
            echo '' >> zmk/app/CMakeLists.txt
            echo 'project(zmk)' >> zmk/app/CMakeLists.txt
            echo '' >> zmk/app/CMakeLists.txt
            echo '# Add ZMK as a subdirectory to include its CMake configuration' >> zmk/app/CMakeLists.txt
            echo 'add_subdirectory(src)' >> zmk/app/CMakeLists.txt
            echo '' >> zmk/app/CMakeLists.txt
            echo '# Include board-specific code' >> zmk/app/CMakeLists.txt
            echo 'if(EXISTS ${CMAKE_SOURCE_DIR}/boards/${BOARD})' >> zmk/app/CMakeLists.txt
            echo '  add_subdirectory(boards/${BOARD})' >> zmk/app/CMakeLists.txt
            echo 'endif()' >> zmk/app/CMakeLists.txt
            echo '' >> zmk/app/CMakeLists.txt
            echo '# Ensure configuration headers are correctly included' >> zmk/app/CMakeLists.txt
            echo 'zephyr_include_directories(' >> zmk/app/CMakeLists.txt
            echo '  ${CMAKE_SOURCE_DIR}/include' >> zmk/app/CMakeLists.txt
            echo '  ${CMAKE_SOURCE_DIR}/../config' >> zmk/app/CMakeLists.txt
            echo ')' >> zmk/app/CMakeLists.txt
            echo '' >> zmk/app/CMakeLists.txt
            echo '# Process app-specific configuration' >> zmk/app/CMakeLists.txt
            echo 'if(EXISTS ${CMAKE_SOURCE_DIR}/app_config.cmake)' >> zmk/app/CMakeLists.txt
            echo '  include(${CMAKE_SOURCE_DIR}/app_config.cmake)' >> zmk/app/CMakeLists.txt
            echo 'endif()' >> zmk/app/CMakeLists.txt
          fi
          
          # Create src directory and a minimal source file if needed
          mkdir -p zmk/app/src
          if [ ! -f "zmk/app/src/CMakeLists.txt" ]; then
            echo "Creating minimal src/CMakeLists.txt..."
            echo 'target_sources(app PRIVATE main.c)' > zmk/app/src/CMakeLists.txt
          fi
          
          if [ ! -f "zmk/app/src/main.c" ]; then
            echo "Creating minimal main.c..."
            echo '#include <zephyr/kernel.h>' > zmk/app/src/main.c
            echo '#include <zephyr/logging/log.h>' >> zmk/app/src/main.c
            echo '' >> zmk/app/src/main.c
            echo 'LOG_MODULE_REGISTER(zmk, CONFIG_ZMK_LOG_LEVEL);' >> zmk/app/src/main.c
            echo '' >> zmk/app/src/main.c
            echo 'int main(void) {' >> zmk/app/src/main.c
            echo '    return 0;' >> zmk/app/src/main.c
            echo '}' >> zmk/app/src/main.c
          fi
          
          # Create include directory and headers if needed
          mkdir -p zmk/app/include/zmk
          
          # Verify directory structure
          echo "Directory structure created:"
          find zmk -type f | sort
          
      - name: Prepare for Build
        run: |
          # Setup Zephyr environment if needed
          if [ ! -d "zephyr" ]; then
            # Clone Zephyr directly
            git clone --depth 1 https://github.com/zephyrproject-rtos/zephyr.git
            
            # Set Zephyr base environment variable
            export ZEPHYR_BASE=$(pwd)/zephyr
            echo "ZEPHYR_BASE=${ZEPHYR_BASE}" >> $GITHUB_ENV
          fi
          
      - name: Build Firmware
        run: |
          # Get list of directories to see what we have
          echo "Current directory structure:"
          ls -la
          
          # Set Zephyr base environment variable if needed
          if [ -d "zephyr" ] && [ -z "$ZEPHYR_BASE" ]; then
            export ZEPHYR_BASE=$(pwd)/zephyr
            echo "Using ZEPHYR_BASE=${ZEPHYR_BASE}"
          fi
          
          # Build firmware with correct path to app directory
          west build -s zmk/app -p auto -b ${{ matrix.board }} -- -DSHIELD=${{ matrix.shield }} -DZMK_CONFIG="${GITHUB_WORKSPACE}/config"
          
          # Check build result
          if [ -f "build/zephyr/zmk.uf2" ]; then
            mkdir -p artifacts
            cp build/zephyr/zmk.uf2 "artifacts/${{ matrix.shield }}.uf2"
            echo "Build successful for ${{ matrix.shield }}"
          else
            echo "Build failed for ${{ matrix.shield }}"
            find build -name "*.log" -type f -exec cat {} \;
            exit 1
          fi
          
      - name: Archive firmware
        uses: actions/upload-artifact@v4
        with:
          name: firmware
          path: artifacts/*.uf2
          
      - name: Archive Build Logs on Failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.shield }}
          path: |
            build/zephyr/*.log
            build/CMakeFiles/CMakeError.log
            build/CMakeFiles/CMakeOutput.log
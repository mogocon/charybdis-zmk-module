name: Build

on:
  push:
    branches:
      - main
      - master
    paths:
      - 'config/**'
      - '.github/workflows/build.yml'
  pull_request:
    paths:
      - 'config/**'
      - '.github/workflows/build.yml'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: zmkfirmware/zmk-build-arm:3.5
    strategy:
      fail-fast: false
      matrix:
        include:
          # Splinky v2
          - board: nice_nano_v2
            shield: splinky_v2_left
          - board: nice_nano_v2
            shield: splinky_v2_right
          # Splinky v3
          - board: nice_nano_v2
            shield: splinky_v3_left
          - board: nice_nano_v2
            shield: splinky_v3_right
          # Settings reset
          - board: nice_nano_v2
            shield: settings_reset
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Cache west modules
        uses: actions/cache@v4
        env:
          cache-name: cache-zephyr-modules
        with:
          path: |
            modules/
            tools/
            zephyr/
            bootloader/
            zmk/
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('config/west.yml') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
            
      - name: West Init
        run: west init -l config
        
      - name: Configure Git
        run: |
          git config --global --add safe.directory '*'
          git config --global url."https://github.com/".insteadOf git://github.com/
          
      - name: Setup Shield Directories
        run: |
          # Create necessary directories
          mkdir -p config/boards/shields/splinky_v2
          mkdir -p config/boards/shields/splinky_v3
          
          # ========== Splinky v2 Files ==========
          # Copy Shield Files if they don't exist in the checked out repo
          # Main DTSI file
          if [ ! -f "config/boards/shields/splinky_v2/splinky_v2.dtsi" ]; then
            if [ -f "config/splinky_v2.dtsi" ]; then
              cp "config/splinky_v2.dtsi" "config/boards/shields/splinky_v2/splinky_v2.dtsi"
            else
              echo "Creating splinky_v2.dtsi from template"
              cat > "config/boards/shields/splinky_v2/splinky_v2.dtsi" << 'EOF'
/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/matrix_transform.h>

/ {
    chosen {
        zmk,matrix-transform = &splinky_transform_v2;
        zmk,kscan = &kscan0;
    };

    // For Splinky v2
    splinky_transform_v2: splinky_transform_v2 {
        compatible = "zmk,matrix-transform";
        rows = <4>;
        columns = <12>;
        map = <
RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5)                 RC(0,6) RC(0,7) RC(0,8) RC(0,9) RC(0,10) RC(0,11)
RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5)                 RC(1,6) RC(1,7) RC(1,8) RC(1,9) RC(1,10) RC(1,11)
RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5) RC(2,6) RC(2,7) RC(2,8) RC(2,9) RC(2,10) RC(2,11) RC(2,12) RC(2,13)
                        RC(3,3) RC(3,4) RC(3,5) RC(3,6) RC(3,7) RC(3,8) RC(3,9) RC(3,10) RC(3,11) RC(3,12)
        >;
    };

    kscan0: kscan {
        compatible = "zmk,kscan-gpio-matrix";
        diode-direction = "col2row";

        row-gpios
            = <&gpio0 22 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&gpio1 0  (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&gpio1 3  (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&gpio1 1  (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            ;
    };
};
EOF
            fi
          fi
          
          # Left overlay
          if [ ! -f "config/boards/shields/splinky_v2/splinky_v2_left.overlay" ]; then
            if [ -f "config/splinky_v2_left.overlay" ]; then
              cp "config/splinky_v2_left.overlay" "config/boards/shields/splinky_v2/splinky_v2_left.overlay"
            else
              echo "Creating splinky_v2_left.overlay from template"
              cat > "config/boards/shields/splinky_v2/splinky_v2_left.overlay" << 'EOF'
/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "splinky_v2.dtsi"

&kscan0 {
    col-gpios
        = <&gpio1 11 GPIO_ACTIVE_HIGH>
        , <&gpio1 10 GPIO_ACTIVE_HIGH>
        , <&gpio1 13 GPIO_ACTIVE_HIGH>
        , <&gpio1 15 GPIO_ACTIVE_HIGH>
        , <&gpio0 2  GPIO_ACTIVE_HIGH>
        , <&gpio0 29 GPIO_ACTIVE_HIGH>
        , <&gpio0 31 GPIO_ACTIVE_HIGH>
        ;
};
EOF
            fi
          fi
          
          # Right overlay
          if [ ! -f "config/boards/shields/splinky_v2/splinky_v2_right.overlay" ]; then
            if [ -f "config/splinky_v2_right.overlay" ]; then
              cp "config/splinky_v2_right.overlay" "config/boards/shields/splinky_v2/splinky_v2_right.overlay"
            else
              echo "Creating splinky_v2_right.overlay from template"
              cat > "config/boards/shields/splinky_v2/splinky_v2_right.overlay" << 'EOF'
/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "splinky_v2.dtsi"

&kscan0 {
    col-gpios
        = <&gpio0 29 GPIO_ACTIVE_HIGH>
        , <&gpio0 31 GPIO_ACTIVE_HIGH>
        , <&gpio0 2  GPIO_ACTIVE_HIGH>
        , <&gpio1 15 GPIO_ACTIVE_HIGH>
        , <&gpio1 13 GPIO_ACTIVE_HIGH>
        , <&gpio1 10 GPIO_ACTIVE_HIGH>
        , <&gpio1 11 GPIO_ACTIVE_HIGH>
        ;
};

&splinky_transform_v2 {
    col-offset = <6>;
};
EOF
            fi
          fi
          
          # Kconfig files
          if [ ! -f "config/boards/shields/splinky_v2/Kconfig.defconfig" ]; then
            if [ -f "config/Kconfig.defconfig" ]; then
              cp "config/Kconfig.defconfig" "config/boards/shields/splinky_v2/Kconfig.defconfig"
            else
              echo "Creating Kconfig.defconfig from template"
              cat > "config/boards/shields/splinky_v2/Kconfig.defconfig" << 'EOF'
# Copyright (c) 2022 The ZMK Contributors
# SPDX-License-Identifier: MIT

if SHIELD_SPLINKY_V2_LEFT

config ZMK_KEYBOARD_NAME
	default "Charybdis v2"

config ZMK_SPLIT_ROLE_CENTRAL
	default y

endif

if SHIELD_SPLINKY_V2_LEFT || SHIELD_SPLINKY_V2_RIGHT

config ZMK_SPLIT
	default y

endif
EOF
            fi
          fi
          
          if [ ! -f "config/boards/shields/splinky_v2/Kconfig.shield" ]; then
            if [ -f "config/Kconfig.shield" ]; then
              cp "config/Kconfig.shield" "config/boards/shields/splinky_v2/Kconfig.shield"
            else
              echo "Creating Kconfig.shield from template"
              cat > "config/boards/shields/splinky_v2/Kconfig.shield" << 'EOF'
# Copyright (c) 2022 The ZMK Contributors
# SPDX-License-Identifier: MIT

config SHIELD_SPLINKY_V2_LEFT
	def_bool $(shields_list_contains,splinky_v2_left)

config SHIELD_SPLINKY_V2_RIGHT
	def_bool $(shields_list_contains,splinky_v2_right)
EOF
            fi
          fi

          # ========== Splinky v3 Files ==========
          # Main DTSI file
          echo "Creating splinky_v3.dtsi from template"
          cat > "config/boards/shields/splinky_v3/splinky_v3.dtsi" << 'EOF'
/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/matrix_transform.h>
#include <dt-bindings/zmk/mouse.h>

/ {
    chosen {
        zmk,matrix-transform = &splinky_transform_v3;
        zmk,kscan = &kscan0;
    };

    // For Splinky v3
    splinky_transform_v3: splinky_transform_v3 {
        compatible = "zmk,matrix-transform";
        rows = <4>;
        columns = <12>;
        map = <
RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5)                 RC(0,6) RC(0,7) RC(0,8) RC(0,9) RC(0,10) RC(0,11)
RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5)                 RC(1,6) RC(1,7) RC(1,8) RC(1,9) RC(1,10) RC(1,11)
RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5) RC(2,6) RC(2,7) RC(2,8) RC(2,9) RC(2,10) RC(2,11) RC(2,12) RC(2,13)
                        RC(3,3) RC(3,4) RC(3,5) RC(3,6) RC(3,7) RC(3,8) RC(3,9) RC(3,10) RC(3,11) RC(3,12)
        >;
    };

    kscan0: kscan {
        compatible = "zmk,kscan-gpio-matrix";
        diode-direction = "col2row";

        row-gpios
            = <&gpio0 24 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&gpio0 17 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&gpio0 20 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&gpio0 22 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            ;
    };

    // PMW3610 trackball configuration
    pmw3610_config: pmw3610_config {
        compatible = "zmk,mouse-config";
        status = "okay";

        time-to-max-speed-ms = <500>;
        acceleration-exponent = <1>;
        
        scroll-layer = <3>;     // Default layer for scroll mode
        scroll-mode = <0>;      // Initially disabled
        default-dpi = <1000>;   // Default DPI
        tap-ms = <50>;
        switch-layer = <2>;     // Layer for trackball enabled
    };
};
EOF
          
          # Left overlay
          echo "Creating splinky_v3_left.overlay from template"
          cat > "config/boards/shields/splinky_v3/splinky_v3_left.overlay" << 'EOF'
/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "splinky_v3.dtsi"

&kscan0 {
    col-gpios
        = <&gpio0 11 GPIO_ACTIVE_HIGH>
        , <&gpio0 10 GPIO_ACTIVE_HIGH>
        , <&gpio0 9  GPIO_ACTIVE_HIGH>
        , <&gpio0 13 GPIO_ACTIVE_HIGH>
        , <&gpio0 12 GPIO_ACTIVE_HIGH>
        , <&gpio0 6  GPIO_ACTIVE_HIGH>
        , <&gpio0 8  GPIO_ACTIVE_HIGH>
        ;
};

&pinctrl {
    spi0_default: spi0_default {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 0, 5)>,
                <NRF_PSEL(SPIM_MOSI, 0, 4)>,
                <NRF_PSEL(SPIM_MISO, 0, 4)>;
        };
    };

    spi0_sleep: spi0_sleep {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 0, 5)>,
                <NRF_PSEL(SPIM_MOSI, 0, 4)>,
                <NRF_PSEL(SPIM_MISO, 0, 4)>;
            low-power-enable;
        };
    };
};

&spi0 {
    compatible = "nordic,nrf-spim";
    status = "okay";

    cs-gpios = <&gpio0 31 GPIO_ACTIVE_LOW>;

    pinctrl-0 = <&spi0_default>;
    pinctrl-1 = <&spi0_sleep>;
    pinctrl-names = "default", "sleep";

    trackball: pmw3610@0 {
        status = "okay";
        compatible = "pixart,pmw3610";
        reg = <0>;
        spi-max-frequency = <2000000>;
        irq-gpios = <&gpio0 29 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;

        /* Use the scroll behavior */
        for-scroll;
        report-rate = <1>; /* 0: 125Hz, 1: 250Hz, 2: 500Hz, 3: 1000Hz */
        dpi = <1000>; /* Supported dpi values: 125, 250, 500, 1000, 1250, 1500, 1750, 2000 */
        scroll-mode;
        scroll-interval-ms = <17>;
    };
};
EOF
          
          # Right overlay
          echo "Creating splinky_v3_right.overlay from template"
          cat > "config/boards/shields/splinky_v3/splinky_v3_right.overlay" << 'EOF'
/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "splinky_v3.dtsi"

&kscan0 {
    col-gpios
        = <&gpio0 8  GPIO_ACTIVE_HIGH>
        , <&gpio0 6  GPIO_ACTIVE_HIGH>
        , <&gpio0 12 GPIO_ACTIVE_HIGH>
        , <&gpio0 13 GPIO_ACTIVE_HIGH>
        , <&gpio0 9  GPIO_ACTIVE_HIGH>
        , <&gpio0 10 GPIO_ACTIVE_HIGH>
        , <&gpio0 11 GPIO_ACTIVE_HIGH>
        ;
};

&splinky_transform_v3 {
    col-offset = <6>;
};
EOF
          
          # Kconfig files
          echo "Creating Kconfig.defconfig for v3"
          cat > "config/boards/shields/splinky_v3/Kconfig.defconfig" << 'EOF'
# Copyright (c) 2022 The ZMK Contributors
# SPDX-License-Identifier: MIT

if SHIELD_SPLINKY_V3_LEFT

config ZMK_KEYBOARD_NAME
	default "Charybdis v3"

config ZMK_SPLIT_ROLE_CENTRAL
	default y

endif

if SHIELD_SPLINKY_V3_LEFT || SHIELD_SPLINKY_V3_RIGHT

config ZMK_SPLIT
	default y

endif
EOF
          
          echo "Creating Kconfig.shield for v3"
          cat > "config/boards/shields/splinky_v3/Kconfig.shield" << 'EOF'
# Copyright (c) 2022 The ZMK Contributors
# SPDX-License-Identifier: MIT

config SHIELD_SPLINKY_V3_LEFT
	def_bool $(shields_list_contains,splinky_v3_left)

config SHIELD_SPLINKY_V3_RIGHT
	def_bool $(shields_list_contains,splinky_v3_right)
EOF
          
          # Make sure the keymap file is in the right location
          if [ -f "config/charybdis.keymap" ] && [ ! -f "config/splinky_v2.keymap" ]; then
            cp "config/charybdis.keymap" "config/splinky_v2.keymap"
          fi
          
          if [ -f "config/charybdis.keymap" ] && [ ! -f "config/splinky_v3.keymap" ]; then
            cp "config/charybdis.keymap" "config/splinky_v3.keymap"
          fi
          
          # List files to verify
          echo "Shield files created:"
          find config/boards/shields -type f | sort
          
      - name: West Update
        run: |
          # Set environment variable to prevent authentication prompt
          export GIT_TERMINAL_PROMPT=0
          west update -o=--depth=1 || true
          
          # Check if update failed and use direct clone as a fallback
          if [ ! -d "zmk" ]; then
            echo "West update failed, trying direct clone..."
            mkdir -p zmk
            cd zmk
            git init
            git remote add origin https://github.com/perillamint/zmk.git
            git fetch --depth 1 origin charybdis-pmw3610
            git checkout FETCH_HEAD
            cd ..
          fi
          
      - name: West Zephyr export
        run: west zephyr-export
        
      - name: West Build (${{ matrix.board }} - ${{ matrix.shield }})
        run: west build -s zmk/app -b ${{ matrix.board }} -- -DSHIELD=${{ matrix.shield }} -DZMK_CONFIG="${GITHUB_WORKSPACE}/config"
        
      - name: Check Build Result
        id: check_build
        run: |
          if [ -f "build/zephyr/zmk.uf2" ]; then
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "success=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Rename artifacts
        if: ${{ steps.check_build.outputs.success == 'true' && matrix.shield != 'settings_reset' }}
        run: |
          mkdir -p artifacts
          cp build/zephyr/zmk.uf2 "artifacts/${{ matrix.shield }}.uf2"
          
      - name: Rename artifacts (settings_reset)
        if: ${{ steps.check_build.outputs.success == 'true' && matrix.shield == 'settings_reset' }}
        run: |
          mkdir -p artifacts
          cp build/zephyr/zmk.uf2 "artifacts/settings_reset.uf2"
          
      - name: Archive firmware
        if: ${{ steps.check_build.outputs.success == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: firmware
          path: artifacts/*.uf2
          
      - name: Archive Build Logs on Failure
        if: ${{ steps.check_build.outputs.success == 'false' }}
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.shield }}
          path: |
            build/zephyr/*.log
            build/CMakeFiles/CMakeError.log
            build/CMakeFiles/CMakeOutput.log
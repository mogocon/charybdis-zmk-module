name: Build

on:
  push:
    branches:
      - main
      - master
    paths:
      - 'config/**'
      - '.github/workflows/build.yml'
  pull_request:
    paths:
      - 'config/**'
      - '.github/workflows/build.yml'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          # Splinky v2
          - board: nice_nano_v2
            shield: splinky_v2_left
          - board: nice_nano_v2
            shield: splinky_v2_right
          # Splinky v3
          - board: nice_nano_v2
            shield: splinky_v3_left
          - board: nice_nano_v2
            shield: splinky_v3_right
          # Settings reset
          - board: nice_nano_v2
            shield: settings_reset
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          pip install west
          sudo apt-get update
          sudo apt-get install -y git cmake ninja-build gperf ccache dfu-util device-tree-compiler wget python3-dev python3-pip python3-setuptools python3-tk python3-wheel xz-utils file make gcc gcc-multilib g++-multilib libsdl2-dev
          
      - name: Setup Shield Files
        run: |
          # Create shield directories
          mkdir -p config/boards/shields/splinky_v2
          mkdir -p config/boards/shields/splinky_v3
          
          # Copy shield files to correct locations
          if [ -f "config/splinky_v2.dtsi" ]; then
            cp "config/splinky_v2.dtsi" "config/boards/shields/splinky_v2/splinky_v2.dtsi"
          fi
          
          if [ -f "config/splinky_v2_left.overlay" ]; then
            cp "config/splinky_v2_left.overlay" "config/boards/shields/splinky_v2/splinky_v2_left.overlay"
          fi
          
          if [ -f "config/splinky_v2_right.overlay" ]; then
            cp "config/splinky_v2_right.overlay" "config/boards/shields/splinky_v2/splinky_v2_right.overlay"
          fi
          
          if [ -f "config/Kconfig.defconfig" ]; then
            cp "config/Kconfig.defconfig" "config/boards/shields/splinky_v2/Kconfig.defconfig"
          fi
          
          if [ -f "config/Kconfig.shield" ]; then
            cp "config/Kconfig.shield" "config/boards/shields/splinky_v2/Kconfig.shield"
          fi
          
          # Copy keymap files if needed
          if [ -f "config/charybdis.keymap" ]; then
            cp "config/charybdis.keymap" "config/splinky_v2.keymap"
            cp "config/charybdis.keymap" "config/splinky_v3.keymap"
          fi
          
          # List shield files
          echo "Shield files found:"
          find config/boards/shields -type f | sort
          
      - name: Initialize ZMK
        run: |
          # Initialize west workspace
          west init -l config
          
          # Set up west configuration
          west config --global update.fetch always
          
          # Update west modules
          west update
          
      - name: Build Firmware
        run: |
          # Build firmware
          west build -b ${{ matrix.board }} -- -DSHIELD=${{ matrix.shield }} -DZMK_CONFIG="${GITHUB_WORKSPACE}/config"
          
          # Check build result
          if [ -f "build/zephyr/zmk.uf2" ]; then
            mkdir -p artifacts
            cp build/zephyr/zmk.uf2 "artifacts/${{ matrix.shield }}.uf2"
            echo "Build successful for ${{ matrix.shield }}"
          else
            echo "Build failed for ${{ matrix.shield }}"
            exit 1
          fi
          
      - name: Archive firmware
        uses: actions/upload-artifact@v4
        with:
          name: firmware
          path: artifacts/*.uf2
          
      - name: Archive Build Logs on Failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.shield }}
          path: |
            build/zephyr/*.log
            build/CMakeFiles/CMakeError.log
            build/CMakeFiles/CMakeOutput.log
name: Build

on:
  push:
    branches:
      - main
      - master
    paths:
      - 'config/**'
      - '.github/workflows/build.yml'
  pull_request:
    paths:
      - 'config/**'
      - '.github/workflows/build.yml'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          # Splinky v2
          - board: nice_nano_v2
            shield: splinky_v2_left
          - board: nice_nano_v2
            shield: splinky_v2_right
          # Splinky v3
          - board: nice_nano_v2
            shield: splinky_v3_left
          - board: nice_nano_v2
            shield: splinky_v3_right
          # Settings reset
          - board: nice_nano_v2
            shield: settings_reset
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          pip install west
          sudo apt-get update
          sudo apt-get install -y git cmake ninja-build gperf ccache dfu-util device-tree-compiler wget python3-dev python3-pip python3-setuptools python3-tk python3-wheel xz-utils file make gcc gcc-multilib g++-multilib libsdl2-dev
          
      - name: Setup Shield Files
        run: |
          # Create shield directories
          mkdir -p config/boards/shields/splinky_v2
          mkdir -p config/boards/shields/splinky_v3
          
          # Copy shield files to correct locations
          if [ -f "config/splinky_v2.dtsi" ]; then
            cp "config/splinky_v2.dtsi" "config/boards/shields/splinky_v2/splinky_v2.dtsi"
          fi
          
          if [ -f "config/splinky_v2_left.overlay" ]; then
            cp "config/splinky_v2_left.overlay" "config/boards/shields/splinky_v2/splinky_v2_left.overlay"
          fi
          
          if [ -f "config/splinky_v2_right.overlay" ]; then
            cp "config/splinky_v2_right.overlay" "config/boards/shields/splinky_v2/splinky_v2_right.overlay"
          fi
          
          if [ -f "config/Kconfig.defconfig" ]; then
            cp "config/Kconfig.defconfig" "config/boards/shields/splinky_v2/Kconfig.defconfig"
          fi
          
          if [ -f "config/Kconfig.shield" ]; then
            cp "config/Kconfig.shield" "config/boards/shields/splinky_v2/Kconfig.shield"
          fi
          
          # Copy for v3 as well
          for file in config/boards/shields/splinky_v2/*; do
            base_name=$(basename "$file")
            new_name="${base_name/splinky_v2/splinky_v3}"
            cp "$file" "config/boards/shields/splinky_v3/${new_name}"
          done
          
          # Copy keymap files if needed
          if [ -f "config/charybdis.keymap" ]; then
            cp "config/charybdis.keymap" "config/splinky_v2.keymap"
            cp "config/charybdis.keymap" "config/splinky_v3.keymap"
          fi
          
          # Modify west.yml to use the official ZMK repository instead
          echo 'manifest:' > config/west.yml
          echo '  remotes:' >> config/west.yml
          echo '    - name: zmkfirmware' >> config/west.yml
          echo '      url-base: https://github.com/zmkfirmware' >> config/west.yml
          echo '  projects:' >> config/west.yml
          echo '    - name: zmk' >> config/west.yml
          echo '      remote: zmkfirmware' >> config/west.yml
          echo '      revision: main' >> config/west.yml
          echo '      import: app/west.yml' >> config/west.yml
          echo '  self:' >> config/west.yml
          echo '    path: config' >> config/west.yml
          
      - name: West Init & Update
        run: |
          # Remove any existing zmk directory to avoid conflicts
          rm -rf zmk
          
          # Initialize west workspace
          west init -l config
          
          # Run west update
          west update
          
          # Verify zmk directory exists
          if [ ! -d "zmk" ]; then
            echo "ERROR: zmk directory was not created by west update!"
            exit 1
          fi
          
          # List west modules to verify
          west list
          
      - name: Setup Zephyr Environment
        run: |
          # Find zephyr location
          export ZEPHYR_BASE=$(pwd)/zephyr
          if [ ! -d "$ZEPHYR_BASE" ]; then
            echo "ERROR: Zephyr base directory not found!"
            find . -name "zephyr" -type d
            exit 1
          fi
          
          echo "ZEPHYR_BASE=${ZEPHYR_BASE}" >> $GITHUB_ENV
          echo "Using ZEPHYR_BASE=${ZEPHYR_BASE}"
          
          # Verify key files exist in zephyr base
          if [ ! -f "${ZEPHYR_BASE}/share/zephyr-package/cmake/ZephyrConfig.cmake" ]; then
            echo "ZephyrConfig.cmake not found, checking directory structure:"
            find "${ZEPHYR_BASE}" -name "*Config.cmake" | sort
          fi
          
          # Source zephyr environment if available
          if [ -f "${ZEPHYR_BASE}/zephyr-env.sh" ]; then
            source "${ZEPHYR_BASE}/zephyr-env.sh"
            echo "Sourced zephyr-env.sh"
          else
            echo "WARNING: zephyr-env.sh not found!"
            ls -la "${ZEPHYR_BASE}"
          fi
          
          # Export needed Zephyr paths
          echo "CMAKE_PREFIX_PATH=${ZEPHYR_BASE}/share/zephyr-package/cmake" >> $GITHUB_ENV
          echo "PATH=${ZEPHYR_BASE}/scripts:${PATH}" >> $GITHUB_ENV
          
          # Export ZMK config path
          echo "ZMK_CONFIG=${GITHUB_WORKSPACE}/config" >> $GITHUB_ENV
          
      - name: Build with ZMK Docker Image
        uses: zmkfirmware/zephyr-docker-action@v2
        id: docker_build
        continue-on-error: true
        with:
          arm-toolchain: 1
          command: |
            cd $GITHUB_WORKSPACE
            west build -s zmk/app -p auto -b ${{ matrix.board }} -- -DSHIELD=${{ matrix.shield }} -DZMK_CONFIG="${GITHUB_WORKSPACE}/config"
      
      - name: Alternative Native Build 
        if: steps.docker_build.outcome == 'failure'
        run: |
          echo "Docker build failed, trying native build..."
          
          # Set up Zephyr workspace
          python -m pip install --upgrade pip setuptools wheel cmake west
          pip install -r zephyr/scripts/requirements.txt
          
          # Initialize and update west
          cd $GITHUB_WORKSPACE
          export ZEPHYR_BASE=$GITHUB_WORKSPACE/zephyr
          
          # Print environment for debugging
          echo "ZEPHYR_BASE: $ZEPHYR_BASE"
          echo "PWD: $(pwd)"
          echo "Python: $(which python)"
          echo "West: $(which west)"
          
          # Try native build with explicit paths
          west build -s zmk/app -p auto -b ${{ matrix.board }} -- -DSHIELD=${{ matrix.shield }} -DZMK_CONFIG="${GITHUB_WORKSPACE}/config" -DZEPHYR_BASE="${ZEPHYR_BASE}"
          
      - name: Process Build Results
        run: |
          # Check build result
          if [ -f "build/zephyr/zmk.uf2" ]; then
            mkdir -p artifacts
            cp build/zephyr/zmk.uf2 "artifacts/${{ matrix.shield }}.uf2"
            echo "Build successful for ${{ matrix.shield }}"
          else
            echo "Build failed for ${{ matrix.shield }}"
            find build -name "*.log" -type f -exec cat {} \;
            exit 1
          fi
          
      - name: Archive firmware
        uses: actions/upload-artifact@v4
        with:
          name: firmware
          path: artifacts/*.uf2
          
      - name: Archive Build Logs on Failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.shield }}
          path: |
            build/zephyr/*.log
            build/CMakeFiles/CMakeError.log
            build/CMakeFiles/CMakeOutput.log
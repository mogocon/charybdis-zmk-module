name: Build

on:
  push:
    branches:
      - main
      - master
    paths:
      - 'config/**'
      - '.github/workflows/build.yml'
  pull_request:
    paths:
      - 'config/**'
      - '.github/workflows/build.yml'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          # Splinky v2
          - board: nice_nano_v2
            shield: splinky_v2_left
          - board: nice_nano_v2
            shield: splinky_v2_right
          # Splinky v3
          - board: nice_nano_v2
            shield: splinky_v3_left
          - board: nice_nano_v2
            shield: splinky_v3_right
          # Settings reset
          - board: nice_nano_v2
            shield: settings_reset
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          pip install west
          sudo apt-get update
          sudo apt-get install -y git cmake ninja-build gperf ccache dfu-util device-tree-compiler wget python3-dev python3-pip python3-setuptools python3-tk python3-wheel xz-utils file make gcc gcc-multilib g++-multilib libsdl2-dev
          
      - name: Install Zephyr SDK
        run: |
          # Download and install Zephyr SDK
          cd /tmp
          wget https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v0.16.1/zephyr-sdk-0.16.1_linux-x86_64.tar.xz
          tar xf zephyr-sdk-0.16.1_linux-x86_64.tar.xz
          cd zephyr-sdk-0.16.1
          ./setup.sh -t arm-zephyr-eabi
          
          # Set environment variables
          echo "ZEPHYR_SDK_INSTALL_DIR=/tmp/zephyr-sdk-0.16.1" >> $GITHUB_ENV
          
      - name: Setup Shield Files
        run: |
          # Create shield directories
          mkdir -p config/boards/shields/splinky_v2
          mkdir -p config/boards/shields/splinky_v3
          
          # Copy shield files to correct locations
          if [ -f "config/splinky_v2.dtsi" ]; then
            cp "config/splinky_v2.dtsi" "config/boards/shields/splinky_v2/splinky_v2.dtsi"
          fi
          
          if [ -f "config/splinky_v2_left.overlay" ]; then
            cp "config/splinky_v2_left.overlay" "config/boards/shields/splinky_v2/splinky_v2_left.overlay"
          fi
          
          if [ -f "config/splinky_v2_right.overlay" ]; then
            cp "config/splinky_v2_right.overlay" "config/boards/shields/splinky_v2/splinky_v2_right.overlay"
          fi
          
          if [ -f "config/Kconfig.defconfig" ]; then
            cp "config/Kconfig.defconfig" "config/boards/shields/splinky_v2/Kconfig.defconfig"
          fi
          
          if [ -f "config/Kconfig.shield" ]; then
            cp "config/Kconfig.shield" "config/boards/shields/splinky_v2/Kconfig.shield"
          fi
          
          # Copy for v3 as well
          for file in config/boards/shields/splinky_v2/*; do
            if [ -f "$file" ]; then
              base_name=$(basename "$file")
              new_name="${base_name/splinky_v2/splinky_v3}"
              cp "$file" "config/boards/shields/splinky_v3/${new_name}"
            fi
          done
          
          # Copy keymap files if needed
          if [ -f "config/charybdis.keymap" ]; then
            cp "config/charybdis.keymap" "config/splinky_v2.keymap"
            cp "config/charybdis.keymap" "config/splinky_v3.keymap"
          fi
          
          # Modify west.yml to use the official ZMK repository instead
          echo 'manifest:' > config/west.yml
          echo '  remotes:' >> config/west.yml
          echo '    - name: zmkfirmware' >> config/west.yml
          echo '      url-base: https://github.com/zmkfirmware' >> config/west.yml
          echo '  projects:' >> config/west.yml
          echo '    - name: zmk' >> config/west.yml
          echo '      remote: zmkfirmware' >> config/west.yml
          echo '      revision: main' >> config/west.yml
          echo '      import: app/west.yml' >> config/west.yml
          echo '  self:' >> config/west.yml
          echo '    path: config' >> config/west.yml
          
      - name: Initialize Build Environment
        run: |
          # Clean up any existing directories
          rm -rf zmk zephyr
          
          # Initialize west workspace
          west init -l config
          
          # Apply workspace updates
          west update
          west zephyr-export
          
          # Install Python dependencies
          pip install -r zephyr/scripts/requirements.txt
          
          # Print environment information
          echo "West workspace info:"
          west list
          
          # Find and set ZEPHYR_BASE
          export ZEPHYR_BASE=$(pwd)/zephyr
          echo "ZEPHYR_BASE=${ZEPHYR_BASE}" >> $GITHUB_ENV
          echo "Using ZEPHYR_BASE=${ZEPHYR_BASE}"
          
          # Verify key directories
          if [ ! -d "zmk" ]; then
            echo "ERROR: zmk directory not found!"
            exit 1
          fi
          
          if [ ! -d "zephyr" ]; then
            echo "ERROR: zephyr directory not found!"
            exit 1
          fi
          
      - name: Build Firmware
        run: |
          # Set environment variables
          export ZEPHYR_BASE=$(pwd)/zephyr
          export ZEPHYR_TOOLCHAIN_VARIANT=zephyr
          export ZEPHYR_SDK_INSTALL_DIR=/tmp/zephyr-sdk-0.16.1
          
          # Print directory structure for debugging
          echo "Current directory content:"
          ls -la
          
          echo "ZMK app directory content:"
          ls -la zmk/app
          
          # Clean build directory
          rm -rf build
          
          # Build firmware with explicit toolchain
          west build -s zmk/app -p always -b ${{ matrix.board }} -- -DSHIELD=${{ matrix.shield }} -DZMK_CONFIG="${GITHUB_WORKSPACE}/config" -DZEPHYR_TOOLCHAIN_VARIANT=zephyr
          
          # Check build result
          if [ -f "build/zephyr/zmk.uf2" ]; then
            mkdir -p artifacts
            cp build/zephyr/zmk.uf2 "artifacts/${{ matrix.shield }}.uf2"
            echo "Build successful for ${{ matrix.shield }}"
          else
            echo "Build failed for ${{ matrix.shield }}"
            find build -name "*.log" -type f -exec cat {} \;
            exit 1
          fi
          
      - name: Archive firmware
        uses: actions/upload-artifact@v4
        with:
          name: firmware
          path: artifacts/*.uf2
          
      - name: Archive Build Logs on Failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.shield }}
          path: |
            build/zephyr/*.log
            build/CMakeFiles/CMakeError.log
            build/CMakeFiles/CMakeOutput.log